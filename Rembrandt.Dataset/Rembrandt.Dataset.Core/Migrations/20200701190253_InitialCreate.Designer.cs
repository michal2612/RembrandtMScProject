// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rembrandt.Dataset.Core.Context;

namespace Rembrandt.Dataset.Core.Migrations
{
    [DbContext(typeof(ObservationContext))]
    [Migration("20200701190253_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5");

            modelBuilder.Entity("Rembrandt.Dataset.Core.Models.Activities", b =>
                {
                    b.Property<int>("ActivitiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Biking")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Jogging")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Relaxing")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Socialising")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Walking")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivitiesId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Rembrandt.Dataset.Core.Models.Attributes", b =>
                {
                    b.Property<int>("AttributesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Beauty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Benches")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Biodiversity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Crowded")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Facilities")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Flowers")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Garbage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Lawns")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Lively")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Natveg")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Noisy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Paths")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Play")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Relaxing")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Safe")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Shrubs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Sports")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Tranquil")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Trees")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Veget")
                        .HasColumnType("INTEGER");

                    b.HasKey("AttributesId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("Rembrandt.Dataset.Core.Models.Contributor", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("DutchNationality")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Education")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("MoreInvolved")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("NatureOriented")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("VisitAlone")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("VisitDaily")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VisitFreq")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VisitOtherParks")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("WithChildren")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Contributor");
                });

            modelBuilder.Entity("Rembrandt.Dataset.Core.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GpsAccuracy")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<float>("Longitude")
                        .HasColumnType("REAL");

                    b.HasKey("LocationId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Rembrandt.Dataset.Core.Models.Observation", b =>
                {
                    b.Property<int>("ObservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActivitiesId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AttributesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContributorId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParkId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhotoAddress")
                        .HasColumnType("TEXT");

                    b.Property<int>("PhotoTowardsPointCompass")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SkipReason")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeSubmitted")
                        .HasColumnType("TEXT");

                    b.HasKey("ObservationId");

                    b.HasIndex("ActivitiesId");

                    b.HasIndex("AttributesId");

                    b.HasIndex("ContributorId");

                    b.HasIndex("ParkId");

                    b.ToTable("Observations");
                });

            modelBuilder.Entity("Rembrandt.Dataset.Core.Models.Park", b =>
                {
                    b.Property<int>("ParkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ActualLocationLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MeasuredLocationLocationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParkId");

                    b.HasIndex("ActualLocationLocationId");

                    b.HasIndex("MeasuredLocationLocationId");

                    b.ToTable("Park");
                });

            modelBuilder.Entity("Rembrandt.Dataset.Core.Models.Observation", b =>
                {
                    b.HasOne("Rembrandt.Dataset.Core.Models.Activities", "Activities")
                        .WithMany()
                        .HasForeignKey("ActivitiesId");

                    b.HasOne("Rembrandt.Dataset.Core.Models.Attributes", "Attributes")
                        .WithMany()
                        .HasForeignKey("AttributesId");

                    b.HasOne("Rembrandt.Dataset.Core.Models.Contributor", "Contributor")
                        .WithMany()
                        .HasForeignKey("ContributorId");

                    b.HasOne("Rembrandt.Dataset.Core.Models.Park", "Park")
                        .WithMany()
                        .HasForeignKey("ParkId");
                });

            modelBuilder.Entity("Rembrandt.Dataset.Core.Models.Park", b =>
                {
                    b.HasOne("Rembrandt.Dataset.Core.Models.Location", "ActualLocation")
                        .WithMany()
                        .HasForeignKey("ActualLocationLocationId");

                    b.HasOne("Rembrandt.Dataset.Core.Models.Location", "MeasuredLocation")
                        .WithMany()
                        .HasForeignKey("MeasuredLocationLocationId");
                });
#pragma warning restore 612, 618
        }
    }
}
