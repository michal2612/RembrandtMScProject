@model Rembrandt.Web.ViewModels.LocationViewModel
@{
    ViewData["Title"] = "Location";
    const float minGreenValue = 7f;
    const float minOrangeValue = 3f;
    const float minGreenValueTo5 = 3f;
    const float minOrangeValueto5 = 2f;
}
<div class="text-center">
    <div id="map">
    </div>
    <div id="location-info" class="d-flex justify-content-center well">
        <h1 class="display-4">LOCATION ID: @Model.ObservationStatDto.SiteId</h1>
        <div id="location-coordinates">
            <i class="material-icons">my_location</i>
            <div id="coordinates-value"></div>
        </div>
    </div>
</div>
    <div class="d-flex p-2 bd-highlight location-details attributes">
            <div class="jumbotron attributes">
        <h4>Attributes</h4>
        <p>This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.</p>
        @{
            foreach(var property in Model.ObservationStatDto.Attributes.GetType().GetProperties())
            {
                var value = (float)Model.ObservationStatDto.Attributes.GetType().GetProperty(property.Name).GetValue(Model.ObservationStatDto.Attributes);
                <div class="progress progress-striped">
                    @if(@property.Name == "Biodiversity" || @property.Name == "Beauty")
                    {
                    <div class="progress-bar progress-bar-success" style="width: @(value*10)%; background-color: @(value > minGreenValue ? "#5cb85c" : (value >= minOrangeValue ? "#DF691A" : "#d9534f"))">
                        @property.Name (@value.ToString("0.00"))
                    </div>   
                    }
                    else
                    {
                    <div class="progress-bar progress-bar-success" style="width: @(value*10)%; background-color: @(value > minGreenValueTo5 ? "#5cb85c" : (value >= minOrangeValueto5 ? "#DF691A" : "#d9534f"))">
                        @property.Name (@value.ToString("0.00"))
                    </div>
                    }

                </div>
                <br />
            }
        }
    </div>
        <div class="jumbotron activities">
            <h3>Activities</h3>
                @{
                    foreach(var property in Model.ObservationStatDto.Activities.GetType().GetProperties())
                    {
                        if((bool)Model.ObservationStatDto.Activities.GetType().GetProperty(property.Name).GetValue(Model.ObservationStatDto.Activities))
                        {
                            <div class="alert alert-dismissible alert-success">
                                <p>Area is suitable for <h4><b>@property.Name</b></h4></p>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-dismissible alert-danger">
                                <p>Area is not suitable for <h4><b>@property.Name</b></h4></p>
                            </div>
                        }
                    }
                }
        </div>
    </div>
</div>
<div class="container">

  <h1 class="font-weight-light text-center text-lg-left mt-4 mb-0">Location Gallery</h1>

  <hr class="mt-2 mb-5">

  <div class="row text-center text-lg-left">
    @{
        @foreach(var photo in Model.ObservationsDto.Select(c => c.PhotoAddress))
        {
            <div class="col-lg-3 col-md-4 col-6">
                <a href="@photo" class="d-block mb-4 h-100" target="_blank">
                    <img class="img-fluid img-thumbnail" src="@photo" alt="">
                </a>
            </div>
        }
    }
  </div>
</div>

@section scripts {

    <script>
    function initMap() {
        var raw = @Html.Raw(Json.Serialize(Model.ObservationsDto.Select(c => c.Park.ActualLocation)));

        map = new google.maps.Map(document.getElementById('map'), {
        center: {lat: raw[0].latitude, lng: raw[0].longitude},
        zoom: 18
    });
        

        for(var location of raw) {
              var marker = new google.maps.Marker({
              position: {'lat': location.latitude, 'lng': location.longitude},
              map: map,
              title: location.TimeSubmitted
              });
        }

        document.getElementById('coordinates-value').innerHTML = raw[0].latitude + ' ' + raw[0].longitude;
    }
    </script>

    <script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDgpHpnK2Fgy1xVldrfRrcZHds8Yrr-Kik&callback=initMap&libraries=&v=weekly">
    </script>
}